// LED matrix animations
// - displays flowing chevrons
// - Salvaged LED panel (Model MX-1275)+ Arduino Nano
// Darin White - dw@makebright.com
// 2016-06-08 
//

const int dataInPin      = 12;
const int clkColPin      = 11;
const int strobeOEColPin = 10;
const int clkRowPin      = 9;
const int strobeOERowPin = 8;
const int clkColPin2     = 7; // for the 8 bits on the bottom of each row
const int markerLEDPin   = 2; // discrete LED for status

const int rowScanDelayMS = 1;
const int numRows = 8;
const int numCols = 4; // need 24 bits, using 32 to pump shift registers
const int numFrames = 40; // frames of complete matrix for animation

// horizontal chevrons scrolling upward
byte ledMatrixFrames[numFrames][numRows][numCols] = {
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x20,0x40,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x60,0x20,0x50,0x40}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x20,0x40,0x00},
	{0xF0,0x40,0x10,0x41}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x60,0x20,0x50,0x40},
	{0x98,0x41,0x04,0x11}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x20,0x40,0x00},
	{0xF0,0x40,0x10,0x41},
	{0xC,0xA3,0x44,0x14}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x60,0x20,0x50,0x40},
	{0x98,0x41,0x04,0x11},
	{0x66,0xB6,0x51,0x44}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x20,0x40,0x00},
	{0xF0,0x40,0x10,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x60,0x20,0x50,0x40},
	{0x98,0x41,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x20,0x40,0x00},
	{0xF0,0x40,0x10,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x60,0x20,0x50,0x40},
	{0x98,0x41,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x20,0x40,0x00},
	{0xF0,0x40,0x10,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x60,0x20,0x50,0x40},
	{0x98,0x41,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x20,0x40,0x00},
	{0xF0,0x40,0x10,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x60,0x20,0x50,0x40},
	{0x98,0x41,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x20,0x40,0x00},
	{0xF0,0x40,0x10,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x1C,0x11,0x41}
	},
	{ /////////////// FRAME ////////////////
	{0x60,0x20,0x50,0x40},
	{0x98,0x41,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11}
	},
	{ /////////////// FRAME ////////////////
	{0xF0,0x40,0x10,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14}
	},
	{ /////////////// FRAME ////////////////
	{0x98,0x41,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44}
	},
	{ /////////////// FRAME ////////////////
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41}
	},
	{ /////////////// FRAME ////////////////
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11}
	},
	{ /////////////// FRAME ////////////////
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0x83,0x04,0x14}
	},
	{ /////////////// FRAME ////////////////
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x06,0x96,0x01,0x04}
	},
	{ /////////////// FRAME ////////////////
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0x83,0x04,0x14},
	{0x03,0x1C,0x01,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x06,0x96,0x01,0x04},
	{0x01,0x08,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0x83,0x04,0x14},
	{0x03,0x1C,0x01,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x06,0x96,0x01,0x04},
	{0x01,0x08,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0x83,0x04,0x14},
	{0x03,0x1C,0x01,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x06,0x96,0x01,0x04},
	{0x01,0x08,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0xF3,0x5C,0x11,0x41},
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0x83,0x04,0x14},
	{0x03,0x1C,0x01,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x99,0x49,0x04,0x11},
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x06,0x96,0x01,0x04},
	{0x01,0x08,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0xC,0xA3,0x44,0x14},
	{0xF3,0x5C,0x11,0x41},
	{0xC,0x83,0x04,0x14},
	{0x03,0x1C,0x01,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x66,0xB6,0x51,0x44},
	{0x99,0x49,0x04,0x11},
	{0x06,0x96,0x01,0x04},
	{0x01,0x08,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0xF3,0x5C,0x11,0x41},
	{0xC,0x83,0x04,0x14},
	{0x03,0x1C,0x01,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x99,0x49,0x04,0x11},
	{0x06,0x96,0x01,0x04},
	{0x01,0x08,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0xC,0x83,0x04,0x14},
	{0x03,0x1C,0x01,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x06,0x96,0x01,0x04},
	{0x01,0x08,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x03,0x1C,0x01,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x01,0x08,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	},
	{ /////////////// FRAME ////////////////
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00}
	}

};

unsigned long previousMillis = 0;
const long interval = 100;    // interval at which to change display (milliseconds)
byte walkFrame = 0;
byte bitIndex = 0;
boolean markerLEDStatus = true;
int numLoopsPattern = 3;

void setup() {
  pinMode(dataInPin, OUTPUT);
  pinMode(clkColPin, OUTPUT);
  pinMode(strobeOEColPin, OUTPUT);
  pinMode(clkRowPin, OUTPUT);
  pinMode(strobeOERowPin, OUTPUT);
  pinMode(markerLEDPin, OUTPUT);
  pinMode(clkColPin2, OUTPUT);
  
  digitalWrite(clkColPin, LOW);
  digitalWrite(clkColPin2, LOW);
  digitalWrite(clkRowPin, LOW);
  digitalWrite(dataInPin, LOW);
  digitalWrite(strobeOEColPin, HIGH); // active low output, with strobe high all serial data clocked directly into latches
  digitalWrite(strobeOERowPin, HIGH); // active low output
  digitalWrite(markerLEDPin, LOW); // low is on
  delay(2000);  // delay for the matrix board to power up
  toggleMarkerLED(); delay(100); 
  toggleMarkerLED(); delay(100);

  clearThePipe(8,0x00); 
  
  shiftOut(dataInPin, clkRowPin, LSBFIRST, (byte) 0xFF); // turn all the rows off
  pumpOutput(strobeOERowPin, rowScanDelayMS);
}

void loop()
{
  cycleRows(); // refresh LEDs from the matrix values

  unsigned long currentMillis = millis();
  if ((currentMillis - previousMillis >= interval)) {
    // save the last time you did something other than refresh the LED rows
    previousMillis = currentMillis;
    if (walkFrame++ > numFrames - 2) {
       walkFrame = 0; // start over
    }
  }
}

void cycleRows() {
  for (int k=0;k<numRows;k++) {
    loadCols(k);
    shiftOut(dataInPin, clkRowPin, LSBFIRST, ((byte)(1<<k)));
    pumpOutput(strobeOERowPin, rowScanDelayMS);
  }
}

void pumpOutput(int oePin, int dwellTimeMS)
{
  digitalWrite(oePin, LOW);
  if (dwellTimeMS > 0) {delay(dwellTimeMS);}
  digitalWrite(oePin, HIGH); 
}

void loadCols(int thisRow)
{
  digitalWrite(strobeOEColPin, HIGH); // turn off columns while loading because strobe and OE are tied together
  int m=0;
  shiftOut(dataInPin, clkColPin, LSBFIRST, (byte)(ledMatrixFrames[walkFrame][thisRow][m++]));
  shiftOut(dataInPin, clkColPin, LSBFIRST, (byte)(ledMatrixFrames[walkFrame][thisRow][m++]));
  shiftOut(dataInPin, clkColPin2, LSBFIRST, (byte)(ledMatrixFrames[walkFrame][thisRow][m++]));
  shiftOut(dataInPin, clkColPin2, LSBFIRST, (byte)(ledMatrixFrames[walkFrame][thisRow][m])); // third byte for the bottom of each row
  digitalWrite(strobeOEColPin, LOW); // now sink current in cols and rely on row scanner for POV and current limiting
}

void clearThePipe(int numBytes, byte dataVal)
{
  digitalWrite(strobeOEColPin, HIGH); // turn off columns while loading because strobe and OE are tied together
  for (int i=0;i<numBytes;i++) {
    shiftOut(dataInPin, clkColPin, LSBFIRST, dataVal); 
  }
  for (int i=0;i<numBytes;i++) {
    shiftOut(dataInPin, clkColPin2, LSBFIRST, dataVal); 
  }
  digitalWrite(strobeOEColPin, LOW);
}

void toggleMarkerLED() {
  if (markerLEDStatus) {
    markerLEDStatus = false;
    digitalWrite(markerLEDPin, HIGH);
  } else {
    markerLEDStatus = true;
    digitalWrite(markerLEDPin, LOW);
  }
}
